// <auto-generated />
using System;
using DataAccesLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccesLayer.Migrations
{
    [DbContext(typeof(SolutionContext))]
    partial class SolutionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-rc.2.22472.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccesLayer.Models.CriterioPremios", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("cantGanadores")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("criterioPremios");
                });

            modelBuilder.Entity("DataAccesLayer.Models.Evento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("equipo1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("equipo2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("fechaHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("golesEquipo1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("golesEquipo2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id_Torneo")
                        .HasColumnType("int");

                    b.Property<string>("resultado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("torneoId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("torneoId");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("DataAccesLayer.Models.PencaCompartida", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("criterioPremiosid")
                        .HasColumnType("int");

                    b.Property<int>("torneoId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("criterioPremiosid");

                    b.HasIndex("torneoId");

                    b.ToTable("PencasCompartidas");
                });

            modelBuilder.Entity("DataAccesLayer.Models.PencaEmpresarial", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("torneoId")
                        .HasColumnType("int");

                    b.Property<int>("usuarioCreadorid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("torneoId");

                    b.HasIndex("usuarioCreadorid");

                    b.ToTable("PencasEmpresariales");
                });

            modelBuilder.Entity("DataAccesLayer.Models.PencaUsuario_Compartida", b =>
                {
                    b.Property<int>("id_Usuario")
                        .HasColumnType("int");

                    b.Property<int>("id_Penca")
                        .HasColumnType("int");

                    b.HasKey("id_Usuario", "id_Penca");

                    b.HasIndex("id_Penca");

                    b.ToTable("pencaUsuarioCompartida");
                });

            modelBuilder.Entity("DataAccesLayer.Models.PencaUsuario_Empresarial", b =>
                {
                    b.Property<int>("id_Usuario")
                        .HasColumnType("int");

                    b.Property<int>("id_Penca")
                        .HasColumnType("int");

                    b.HasKey("id_Usuario", "id_Penca");

                    b.HasIndex("id_Penca");

                    b.ToTable("pencaUsuarioEmpresarial");
                });

            modelBuilder.Entity("DataAccesLayer.Models.PorcentajesPremio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("criterioid")
                        .HasColumnType("int");

                    b.Property<int>("id_CriterioPremio")
                        .HasColumnType("int");

                    b.Property<int>("porcentaje")
                        .HasColumnType("int");

                    b.Property<int>("posicion")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("criterioid");

                    b.ToTable("porcentajePremios");
                });

            modelBuilder.Entity("DataAccesLayer.Models.Premio", b =>
                {
                    b.Property<int>("id_Usuario")
                        .HasColumnType("int");

                    b.Property<int>("id_Penca")
                        .HasColumnType("int");

                    b.Property<int>("criterioPremiosid")
                        .HasColumnType("int");

                    b.Property<int>("id_CriterioPremio")
                        .HasColumnType("int");

                    b.Property<bool>("pago")
                        .HasColumnType("bit");

                    b.Property<float>("valorPremio")
                        .HasColumnType("real");

                    b.HasKey("id_Usuario", "id_Penca");

                    b.HasIndex("criterioPremiosid");

                    b.HasIndex("id_Penca");

                    b.ToTable("Premios");
                });

            modelBuilder.Entity("DataAccesLayer.Models.Subscripcion", b =>
                {
                    b.Property<int>("id_Usuario")
                        .HasColumnType("int");

                    b.Property<int>("id_Penca")
                        .HasColumnType("int");

                    b.Property<string>("nroTar_Credito")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_Usuario", "id_Penca");

                    b.HasIndex("id_Penca");

                    b.ToTable("Subscripciones");
                });

            modelBuilder.Entity("DataAccesLayer.Models.Torneo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("fechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Torneos");
                });

            modelBuilder.Entity("DataAccesLayer.Models.Usuario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("DataAccesLayer.Models.Evento", b =>
                {
                    b.HasOne("DataAccesLayer.Models.Torneo", "torneo")
                        .WithMany()
                        .HasForeignKey("torneoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("torneo");
                });

            modelBuilder.Entity("DataAccesLayer.Models.PencaCompartida", b =>
                {
                    b.HasOne("DataAccesLayer.Models.CriterioPremios", "criterioPremios")
                        .WithMany()
                        .HasForeignKey("criterioPremiosid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccesLayer.Models.Torneo", "torneo")
                        .WithMany("pencasCompartidas")
                        .HasForeignKey("torneoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("criterioPremios");

                    b.Navigation("torneo");
                });

            modelBuilder.Entity("DataAccesLayer.Models.PencaEmpresarial", b =>
                {
                    b.HasOne("DataAccesLayer.Models.Torneo", "torneo")
                        .WithMany("pencasEmpresariales")
                        .HasForeignKey("torneoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccesLayer.Models.Usuario", "usuarioCreador")
                        .WithMany()
                        .HasForeignKey("usuarioCreadorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("torneo");

                    b.Navigation("usuarioCreador");
                });

            modelBuilder.Entity("DataAccesLayer.Models.PencaUsuario_Compartida", b =>
                {
                    b.HasOne("DataAccesLayer.Models.PencaCompartida", "pencaCompartida")
                        .WithMany("pencaUsuarioCompartida")
                        .HasForeignKey("id_Penca")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccesLayer.Models.Usuario", "usuario")
                        .WithMany("pencaUsuarioCompartida")
                        .HasForeignKey("id_Usuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("pencaCompartida");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("DataAccesLayer.Models.PencaUsuario_Empresarial", b =>
                {
                    b.HasOne("DataAccesLayer.Models.PencaEmpresarial", "pencaEmpresarial")
                        .WithMany("pencaUsuarioEmpresarial")
                        .HasForeignKey("id_Penca")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccesLayer.Models.Usuario", "usuario")
                        .WithMany("pencaUsuarioEmpresarial")
                        .HasForeignKey("id_Usuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("pencaEmpresarial");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("DataAccesLayer.Models.PorcentajesPremio", b =>
                {
                    b.HasOne("DataAccesLayer.Models.CriterioPremios", "criterio")
                        .WithMany()
                        .HasForeignKey("criterioid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("criterio");
                });

            modelBuilder.Entity("DataAccesLayer.Models.Premio", b =>
                {
                    b.HasOne("DataAccesLayer.Models.CriterioPremios", "criterioPremios")
                        .WithMany()
                        .HasForeignKey("criterioPremiosid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccesLayer.Models.PencaCompartida", "pencaCompartida")
                        .WithMany("Premios")
                        .HasForeignKey("id_Penca")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccesLayer.Models.Usuario", "usuario")
                        .WithMany("Premios")
                        .HasForeignKey("id_Usuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("criterioPremios");

                    b.Navigation("pencaCompartida");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("DataAccesLayer.Models.Subscripcion", b =>
                {
                    b.HasOne("DataAccesLayer.Models.PencaEmpresarial", "pencaEmpresarial")
                        .WithMany("Subscripciones")
                        .HasForeignKey("id_Penca")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccesLayer.Models.Usuario", "usuario")
                        .WithMany("Subscripciones")
                        .HasForeignKey("id_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pencaEmpresarial");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("DataAccesLayer.Models.PencaCompartida", b =>
                {
                    b.Navigation("Premios");

                    b.Navigation("pencaUsuarioCompartida");
                });

            modelBuilder.Entity("DataAccesLayer.Models.PencaEmpresarial", b =>
                {
                    b.Navigation("Subscripciones");

                    b.Navigation("pencaUsuarioEmpresarial");
                });

            modelBuilder.Entity("DataAccesLayer.Models.Torneo", b =>
                {
                    b.Navigation("pencasCompartidas");

                    b.Navigation("pencasEmpresariales");
                });

            modelBuilder.Entity("DataAccesLayer.Models.Usuario", b =>
                {
                    b.Navigation("Premios");

                    b.Navigation("Subscripciones");

                    b.Navigation("pencaUsuarioCompartida");

                    b.Navigation("pencaUsuarioEmpresarial");
                });
#pragma warning restore 612, 618
        }
    }
}
